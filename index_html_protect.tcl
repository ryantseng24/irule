when RULE_INIT 
{
        #設定變數 wd_fallback_pool 為 http_fallback    
        set static::wd_fallback_pool http_fallback

        #設定變數 wd_meta_refresh_1 為 以下html 內容 
        #輸出畫面顯示等待5秒鐘，5秒後將自動跳轉網頁，若沒有跳轉，可點選以下文字"here"進行跳轉
        set static::wd_meta_refresh_1 "<html><head><meta http-equiv=\"refresh\" content=\"5\"></head><body>Page will be reloaded
in 5 seconds. If the page is not loaded then please click <a href=\""   
        set static::wd_meta_refresh_2 "\">here</a>.</body></html>" 
}

when HTTP_REQUEST 
{ 
    #設定變數 url = www.uniforce.com/abc.html  -->目前request網址 
    set url [HTTP::host][HTTP::uri]

    #從黑名單wdp_fallback查看，如www.uniforce.com/abc.html存在，則進入wd_fallback_pool並disable所有event
    if {[table lookup "wdp_fallback_$url"] eq 1} 
    {
        pool $static::wd_fallback_pool     
        event disable all   
    }
}

when HTTP_RESPONSE 
{
        #設定變數 httpresponselength = 0 (僅作為設定default value用途)
        set httpresponselength 0 

        #如果http response header包含"Content-Length"，則進行以下判斷
        if {[HTTP::header exists "Content-Length"]} 
        {
            #設定變數 httpresponselength為Content-Length的長度值
            set httpresponselength [HTTP::header "Content-Length"]

            #如果Content-Length的長度值 > 1048576 ，則，設定 httpresponselength = 1048576 (僅作為設定最大值用途)
            if {$httpresponselength > 1048576} 
            {
                set httpresponselength 1048576     
            }   
        }

        #如果Content-Length的長度值 > 0   
        if {$httpresponselength > 0} 
        {
            #進行HTTP::collect
            #Collects an amount of HTTP body data, optionally specified with the length argument. When the system collects the specified amount of data, it calls the Tcl event HTTP_REQUEST_DATA or HTTP_RESPONSE_DATA.
            #HTTP::collect取得的內容，提供下一段落(HTTP_RESPONSE_DATA)使用
            HTTP::collect $httpresponselength   
        }
                            
}
when HTTP_RESPONSE_DATA 
{
        #如果request url( www.uniforce.com/abc.html )不是"/"結尾，也不是"index.html"
        if {!($url ends_with "/") and !($url ends_with "index.html")} 
        {
            log local0. "url end without / or index.html. return"   
            # irule 程式執行結束，不繼續進行
            return   
        }

        #設定變數 hash 為 （將HTTP::payload內容 先md5在base64)
        set hash [b64encode [CRYPTO::hash -alg md5 [HTTP::payload]]]   

        log local0. "print hash : $hash"  

        #設定變數 key = wdp_www.uniforce.com/abc.html
        set key "wdp_$url"  

        log local0. "print key : $key"  

        #設定變數 hashtm 為 (在資料表中尋找key索引值為wdp_www.uniforce.com/abc.html 的那筆資料內容)
        # table lookup --> Looks up a value associated with the specified key, in the specified table
        set hashtm [table lookup $key]   

        log local0. "print hashtm : $hashtm" 

        #如果變數 hashtm非空值，則進行以下判斷，否則進入下面else內容(將資料表寫入新record)
        if {$hashtm ne ""} 
        {     
            log local0. "hashtm not null, start" 
            #設定變數 lhash 為 (將hashtm內容進行陣列拆解)
            # Ex. {a,b,c} 拆解為 [0]=a , [1]=b , [2]=c
            set lhash [split $hashtm =]

            #設定變數 hashmem 為 (lhash拆解後的第0個參數 Ex. [0]=a  ，則hashmem 為a)
            set hashmem "[lindex $lhash 0]=="     

            #設定變數 hashsec 為 (lhash拆解後的第2個參數 Ex. [2]=c  ，則hashsec 為c)
            set hashsec [lindex $lhash 2]
            
            #如果hashsec 為空值，則設定hashsec = 9999999999  ，(用途為給一個max value作為default value)
            if {$hashsec eq ""} 
            {       
                set hashsec 9999999999     
            }

            #如果變數hash不等於 hashmem ，代表比對的hash兩者不吻合
            #hash(第64行從目前request取得 payload 的hash值)
            #hashmem (第81行從取得資料表根據url找到的hash值)
            if {$hash ne $hashmem} 
            {
                #設定變數lastupdatetm 為 (資料表中尋找key索引值為last_update_wdp_www.uniforce.com/abc.html 的那筆資料內容)       
                set lastupdatetm [table lookup last_update_$key]

                #如果變數lastupdatetm為空值 或 變數lastupdatetm < hashsec （剛剛設定的hashsec 原始資料來源為hashtm或9999999999）
                #代表目前的這個request是被認定為有問題的
                if {($lastupdatetm eq "") or ($lastupdatetm < $hashsec)} 
                {
                    #將 www.uniforce.com/abc.html寫入 黑名單wdp_fallback，呼應第19行          
                    table set "wdp_fallback_$url" 1 300

                    #設定變數cnt為 以下內容，並回應 HTTP::respond 200 content $cnt noserver
                    #Unless you add the “noserver” option, a header of the form “Server: BIG-IP” will be inserted to distinguish replies generated by the BIG-IP from those supplied by remote servers.
                    set cnt "${static::wd_meta_refresh_1}http://$url$static::wd_meta_refresh_2"         
                    HTTP::respond 200 content $cnt noserver 

                    #寫log        
                    log local0. "Defacement detected -- Replaced with own content for refresh"            
                }     
            }   
        } 
        else 
        {     
            #(將資料表寫入新record)
            set hashtm "$hash[clock seconds]"     
            table set $key $hashtm 300     
            log local0. "Learning new hash for $url is $hashtm"   
        }
}
